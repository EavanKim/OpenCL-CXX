// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[edge-case-behavior]]
=== Edge Case Behavior

The edge case behavior of the math functions (__<<math-functions,Math Functions>> section__) shall conform to sections F.9 and G.6 of ISO/IEC 9899:TC 2, except where noted below in __<<additional-requirements-beyond-isoiec-9899tc2,Additional Requirements Beyond ISO/IEC 9899:TC2>> section__.

[[additional-requirements-beyond-isoiec-9899tc2]]
==== Additional Requirements Beyond ISO/IEC 9899:TC2

Functions that return a NaN with more than one NaN operand shall return one of the NaN operands.
Functions that return a NaN operand may silence the NaN if it is a signaling NaN.
A non-signaling NaN shall be converted to a non-signaling NaN.
A signaling NaN shall be converted to a NaN, and should be converted to a non-signaling NaN.
How the rest of the NaN payload bits or the sign of NaN is converted is undefined.

The usual allowances for rounding error (__<<relative-error-as-ulps,Relative Error as ULPs>> section__) or flushing behavior (__<<edge-case-behavior-in-flush-to-zero-mode,Edge Case Behavior in Flush To Zero Mode>> section__) shall not apply for those values for which _section F.9_ of ISO/IEC 9899:,TC2, or __<<additional-requirements-beyond-isoiec-9899tc2,Additional Requirements Beyond ISO/IEC 9899:TC2>>__ and __<<edge-case-behavior-in-flush-to-zero-mode,Edge Case Behavior in Flush To Zero Mode>> sections__ below (and similar sections for other floating-point precisions) prescribe a result (e.g. ceil( -1 < x < 0 ) returns -0).
Those values shall produce exactly the prescribed answers, and no other.
Where the ± symbol is used, the sign shall be preserved.
For example, sin(±0) = ±0 shall be interpreted to mean sin(+0) is +0 and sin(-0) is -0.

* acospi( 1 ) = +0.
* acospi( x ) returns a NaN for | x | > 1.
* asinpi( ±0 ) = ±0.
* asinpi( x ) returns a NaN for | x | > 1.
* atanpi( ±0 ) = ±0.
* atanpi ( ±∞ ) = ±0.5.
* atan2pi ( ±0, -0 ) = ±1.
* atan2pi ( ±0, +0 ) = ± 0.
* atan2pi ( ±0, x ) returns ± 1 for x < 0.
* atan2pi ( ±0, x) returns ± 0 for x > 0.
* atan2pi ( y, ±0 ) returns -0.5 for y < 0.
* atan2pi ( y, ±0 ) returns 0.5 for y > 0.
* atan2pi ( ±y, -∞ ) returns ± 1 for finite y > 0.
* atan2pi ( ±y, +∞ ) returns ± 0 for finite y > 0.
* atan2pi ( ±∞, x ) returns ± 0.5 for finite x.
* atan2pi (±∞, -∞ ) returns ±0.75.
* atan2pi (±∞, +∞ ) returns ±0.25.
* ceil( -1 < x < 0 ) returns -0.
* cospi( ±0 ) returns 1
* cospi( n + 0.5 ) is +0 for any integer n where n + 0.5 is representable.
* cospi( ±∞ ) returns a NaN.
* exp10( ±0 ) returns 1.
* exp10( -∞ ) returns +0.
* exp10( +∞ ) returns +∞.
* distance(x, y) calculates the distance from x to y without overflow or extraordinary precision loss due to underflow.
* fdim( any, NaN ) returns NaN.
* fdim( NaN, any ) returns NaN.
* fmod( ±0, NaN ) returns NaN.
* frexp( ±∞, exp ) returns ±∞ and stores 0 in exp.
* frexp( NaN, exp ) returns the NaN and stores 0 in exp.
* fract( x, iptr) shall not return a value greater than or equal to 1.0, and shall not return a value less than 0.
* fract( +0, iptr ) returns +0 and +0 in iptr.
* fract( -0, iptr ) returns -0 and -0 in iptr.
* fract( +inf, iptr ) returns +0 and +inf in iptr.
* fract( -inf, iptr ) returns -0 and -inf in iptr.
* fract( NaN, iptr ) returns the NaN and NaN in iptr.
* length calculates the length of a vector without overflow or extraordinary precision loss due to underflow.
* lgamma_r( x, signp ) returns 0 in signp if x is zero or a negative integer.
* nextafter( -0, y > 0 ) returns smallest positive denormal value.
* nextafter( +0, y < 0 ) returns smallest negative denormal value.
* normalize shall reduce the vector to unit length, pointing in the same direction without overflow or extraordinary precision loss due to underflow.
* normalize( v ) returns v if all elements of v are zero.
* normalize( v ) returns a vector full of NaNs if any element is a NaN.
* normalize( v ) for which any element in v is infinite shall proceed as if the elements in v were replaced as follows:
+
[source]
----
for( i = 0; i < sizeof(v) / sizeof(v[0] ); i++ )
    v[i] = isinf(v[i] )  ?  copysign(1.0, v[i]) : 0.0 * v [i];
----

* pow( ±0, -∞ ) returns +∞
* pown( x, 0 ) is 1 for any x, even zero, NaN or infinity.
* pown( ±0, n ) is ±∞ for odd n < 0.
* pown( ±0, n ) is +∞ for even n < 0.
* pown( ±0, n ) is +0 for even n > 0.
* pown( ±0, n ) is ±0 for odd n > 0.
* powr( x, ±0 ) is 1 for finite x > 0.
* powr( ±0, y ) is +∞ for finite y < 0.
* powr( ±0, -∞) is +∞.
* powr( ±0, y ) is +0 for y > 0.
* powr( +1, y ) is 1 for finite y.
* powr( x, y ) returns NaN for x < 0.
* powr( ±0, ±0 ) returns NaN.
* powr( +∞, ±0 ) returns NaN.
* powr( +1, ±∞ ) returns NaN.
* powr( x, NaN ) returns the NaN for x >= 0.
* powr( NaN, y ) returns the NaN.
* rint( -0.5 \<= x < 0 ) returns -0.
* remquo(x, y, &quo) returns a NaN and 0 in quo if x is ±∞, or if y is 0 and the other argument is non-NaN or if either argument is a NaN.
* rootn( ±0, n ) is ±∞ for odd n < 0.
* rootn( ±0, n ) is +∞ for even n < 0.
* rootn( ±0, n ) is +0 for even n > 0.
* rootn( ±0, n ) is ±0 for odd n > 0.
* rootn( x, n ) returns a NaN for x < 0 and n is even.
* rootn( x, 0 ) returns a NaN.
* round( -0.5 < x < 0 ) returns -0.
* sinpi( ±0 ) returns ±0.
* sinpi( +n) returns +0 for positive integers n.
* sinpi( -n ) returns -0 for negative integers n.
* sinpi( ±∞ ) returns a NaN.
* tanpi( ±0 ) returns ±0.
* tanpi( ±∞ ) returns a NaN.
* tanpi( n ) is copysign( 0.0, n ) for even integers n.
* tanpi( n ) is copysign( 0.0, - n) for odd integers n.
* tanpi( n + 0.5 ) for even integer n is +∞ where n + 0.5 is representable.
* tanpi( n + 0.5 ) for odd integer n is -∞ where n + 0.5 is representable.
* trunc( -1 < x < 0 ) returns -0.

[[changes-to-isoiec-9899-tc2-behavior]]
==== Changes to ISO/IEC 9899: TC2 Behavior

+modf+ behaves as though implemented by:

[source]
----
gentype modf( gentype value, gentype *iptr )
{
    *iptr = trunc( value );
    return copysign( isinf( value ) ? 0.0 : value - *iptr, value );
}
----

rint always rounds according to round to nearest even rounding mode even if the caller is in some other rounding mode.

[[edge-case-behavior-in-flush-to-zero-mode]]
==== Edge Case Behavior in Flush To Zero Mode

If denormals are flushed to zero, then a function may return one of four results:

1. Any conforming result for non-flush-to-zero mode.
2. If the result given by 1. is a sub-normal before rounding, it may be flushed to zero.
3. Any non-flushed conforming result for the function if one or more of its sub-normal operands are flushed to zero.
4. If the result of 3. is a sub-normal before rounding, the result may be flushed to zero.

In each of the above cases, if an operand or result is flushed to zero, the sign of the zero is undefined.

If subnormals are flushed to zero, a device may choose to conform to the following edge cases for nextafter instead of those listed in __<<additional-requirements-beyond-isoiec-9899tc2,Additional Requirements Beyond ISO/IEC 9899:TC2>> section__:

* nextafter ( +smallest normal, y < +smallest normal ) = +0.
* nextafter ( -smallest normal, y > -smallest normal ) = -0.
* nextafter ( -0, y > 0 ) returns smallest positive normal value.
* nextafter ( +0, y < 0 ) returns smallest negative normal value.

For clarity, subnormals or denormals are defined to be the set of representable numbers in the range 0 < x < TYPE_MIN  and -TYPE_MIN < x < -0.
They do not include ±0.
A non-zero number is said to be sub-normal before rounding if after normalization, its radix-2 exponent is less than (TYPE_MIN_EXP - 1). link:#ftn35[[35]]