// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[marker-types]]
=== Marker Types

Some types in OpenCL {cpp} are considered marker types.
These types are special in the manner that their usages need to be tracked by the compiler.
This results in the following set of restrictions that marker types have to follow:

* Marker types have the default constructor deleted.
* Marker types have all default copy and move assignment operators deleted.
* Marker types have address-of operator deleted.
* Marker types cannot be used in divergent control flow. It can result in undefined behavior.
* Size of marker types is undefined.

[[header-opencl_marker-synopsis]]
==== Header <opencl_marker> Synopsis

[source]
----
namespace cl
{
struct marker_type;
 
template<class T>
struct is_marker_type;

}
----

[[marker_type-class]]
==== marker_type class

All special OpenCL {cpp} types must use the +marker_type+ class as a base class.

[[is_marker_type-type-trait]]
==== is_marker_type type trait

+is_marker_type+ type trait provides compile-time check if the base of a class is +marker_type+.

[source]
----
namespace cl
{
template<class T>
struct is_marker_type : integral_constant <bool, is_base_of<marker_type, T>::value> { };

}
----

[[examples]]
==== Examples 

[[example-1]]
===== Example 1

The examples of invalid use of +marker types+.

[source]
----
#include <opencl_image>
#include <opencl_work_item>
using namespace cl;

float4 bar(image1d<float4> img) {
    return img.read({get_global_id(0), get_global_id(1)});
}

kernel void foo(image1d<float4> img1, image1d<float4> img2) {
    image1d<float4> img3; //error: marker type cannot be declared
                          //       in the kernel
    img1 = img2; //error: marker type cannot be assigned
    image1d<float4> *imgPtr = &img1; //error: taking address of
                                     //       marker type

    size_t s = sizeof(img1); //undefined behavior: size of marker
                             //               type is not defined

    float4 val = bar(get_global_id(0) ? img1: img2);
                          //undefined behavior: divergent control flow
}
----

[[example-2]]
===== Example 2

The examples of how to use +is_marker_type+ trait.

[source]
----
#include <opencl_image>
using namespace cl;

kernel void foo(image1d<float4> img) {
  static_assert(is_marker_type<decltype(img)>(), "");
}
----