// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[specialization-constants-library]]
=== Specialization Constants Library

The specialization constants are objects that will not have known constant values until after initial generation of a SPIR-V module.
Such objects are called specialization constants.
Application might provide values for the specialization constants that will be used when SPIR-V program is built.

[[header-opencl_spec_constant-synopsis]]
==== Header <opencl_spec_constant> Synopsis

[source]
----
namespace cl
{
template<class T, unsigned int ID>
struct spec_constant
{
    spec_constant() = delete;
    spec_constant(const spec_constant &) = default;
    spec_constant(spec_constant&&) = default;

    constexpr spec_constant(const T& value);

    spec_constant& operator=(const spec_constant&) = delete;
    spec_constant& operator=(spec_constant&&) = delete;

    const T& get() const noexcept;

    operator const T&() const noexcept;
};

template<class T, unsigned int ID>
const T& get(const spec_constant<T, ID> &r) noexcept;

}
----

[[spec_constant-class-methods-and-get-function]]
==== spec_constant class methods and get function

[[spec_constantspec_constant]]
===== spec_constant::spec_constant

[source]
----
constexpr spec_constant(const T& value);
----

Constructor of spec_constant class.
The value parameter  is a default value of the specialization constant that will be used if a value is not set by the host API.
It must be a literal value.

[[get]]
===== get

[source]
----
const T& get() const noexcept;

operator const T&() const noexcept;

template<class T, unsigned int ID>
const T& get(const spec_constant<T, ID> &r) noexcept;
----

Return a value of specialization constant.
If an object is not specialized from the host, the default value will be returned.

[[requirements-2]]
==== Requirements

Specialization constant variables cannot be defined +constexpr+.

[[data-1]]
===== Data

Template parameter +T+ in spec_constant class template denotes the data type of specialization constant.
The type +T+ must be integral or floating point type.

[[id]]
===== ID

Template parameter +ID+ in spec_constant class template denotes an unique ID of the specialization constant that can be used to set a value from the host API.
The value of +ID+ must be unique within this compilation unit and across any other SPIR-V modules that it is linked with.

[[examples-9]]
==== Examples

[[example-1-9]]
===== Example 1

Example of using the specialization constant in the kernel.
[source]
----
#include <opencl_spec_constant>
cl::spec_constant<int, 1> spec1{ 255 };
constexpr cl::spec_constant<int, 2> spec2{ 255 }; // error, constexpr specialization
                                                  // constant variables are not allowed

kernel void myKernel()
{
  if(cl::get(spec1) == 255)
  {
	// do something if a default value is used
  }
  else
  {
    // do something if the spec constant was specialized by the host
  }
}
----

[[example-2-7]]
===== Example 2

Example of specializing one of the dimensions in +cl::required_work_group_size+ attribute.

[source]
----
#include <opencl_spec_constant>
cl::spec_constant<int, 1> spec1{ 512 };

[[cl::required_work_group_size(spec1, 1, 1)]]
kernel void myKernel()
{
   //...
}
----
