// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[preprocessor-directives-and-macros]]
=== Preprocessor Directives and Macros

The preprocessing directives defined by the {cpp14}  specification (_section 16_) are supported.

The +#pragma+ directive is described as:
[source]
----
#pragma pp-tokensopt new-line
----

A +#pragma+ directive where the preprocessing token +OPENCL+ (used instead of +STDC+) does not immediately follow pragma in the directive (prior to any macro replacement) causes the implementation to behave in an implementation-defined manner.
The behavior might cause translation to fail or cause the translator or the resulting program to behave in a non-conforming manner.
Any such pragma that is not recognized by the implementation is ignored.
If the preprocessing token +OPENCL+ does immediately follow pragma in the directive (prior to any macro replacement), then no macro replacement is performed on the directive, and the directive shall have one of the following forms whose meanings are described elsewhere:
[source]
----
#pragma OPENCL FP_CONTRACT on-off-switch // on-off-switch: one of ON OFF DEFAULT

#pragma OPENCL EXTENSION extensionname : behavior
#pragma OPENCL EXTENSION all : behavior
----

The following predefined macro names are available.

// This is needed so asciidoc does not interpret the underscores as meaning italicize.
:file_macro: pass:[__FILE__]
:line_macro: pass:[__LINE__]
:cpp_version_macro: pass:[__OPENCL_CPP_VERSION__]
:func_macro: pass:[__func__]

+{file_macro}+ The presumed name of the current source file (a character string literal).

+{line_macro}+ The presumed line number (within the current source file) of the current source line (an integer constant).

+{cpp_version_macro}+ substitutes an integer reflecting the OpenCL {cpp} version specified when compiling the OpenCL {cpp} program.
The version of OpenCL {cpp} described in this document will have +{cpp_version_macro}+ substitute the integer +100+.

The macro names defined by the {cpp14} specification in _section 16_ but not currently supported by OpenCL are reserved for future use.

The predefined identifier +{func_macro}+ is available.